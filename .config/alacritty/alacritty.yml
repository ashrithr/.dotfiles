env:
  TERM: xterm-256color

window:
  dimensions:
    columns: 200
    lines: 100
  padding:
    x: 2
    y: 2
  decorations: full

scrolling:
  history: 0

font:
  normal:
    family: Fira Code
    style: Retina

  bold:
    family: Fira Code
    style: Bold

  italic:
    family: Fira Code
    style: Italic

  # Point size
  size: 16.0

  offset:
    x: 0
    y: 0

colors:
  primary:
    background: "0x2E3440"
    foreground: "0xD8DEE9"
  cursor:
    text: "0x2E3440"
    cursor: "0xD8DEE9"
  normal:
    black: "0x3B4252"
    red: "0xBF616A"
    green: "0xA3BE8C"
    yellow: "0xEBCB8B"
    blue: "0x81A1C1"
    magenta: "0xB48EAD"
    cyan: "0x88C0D0"
    white: "0xE5E9F0"
  bright:
    black: "0x4C566A"
    red: "0xBF616A"
    green: "0xA3BE8C"
    yellow: "0xEBCB8B"
    blue: "0x81A1C1"
    magenta: "0xB48EAD"
    cyan: "0x8FBCBB"
    white: "0xECEFF4"

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: false
  url:
    launcher: open

selection:
  semantic_escape_chars: ',│`|:"'' ()[]{}<>'
  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

live_config_reload: true

shell:
  program: /usr/local/bin/zsh
  args:
    - --login

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify
# a key and modifiers required to trigger it, terminal modes where the binding
# is applicable, and what should be done when the key binding fires. It can
# either send a byte sequnce to the running application (`chars`), execute
# a predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Example:
#   `- { key: V, mods: Command, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
key_bindings:
  - { key: N, mods: Command, action: SpawnNewInstance }
